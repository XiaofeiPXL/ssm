<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.itcast.dao.UserDao">
    <!--开启二级缓存第二步,在对应的xml文件中配置-->
    <!--SqlSessionFactory中存放的是散装数据,不是对象,所以会创建新的对象-->
    <cache/>
    <resultMap id="userMap" type="user">
        <id property="id" column="id"/>
        <result property="username" column="username"/>
        <result property="birthday" column="birthday"/>
        <result property="sex" column="sex"/>
        <result property="address" column="address"/>
        <collection property="accounts" ofType="account">
            <id property="id" column="ID"/>
            <result property="uid" column="UID"/>
            <result property="money" column="MONEY"/>
        </collection>
        <collection property="roles" ofType="role">
            <id property="id" column="ID"/>
            <result property="roleName" column="ROLE_NAME"/>
            <result property="roleDesc" column="ROLE_DESC"/>
        </collection>
    </resultMap>
    <select id="findAll" resultMap="userMap">
        select u.*,r.ROLE_NAME,r.ROLE_DESC,ac.MONEY from user u
        left outer join user_role ur on u.id = ur.UID
        left outer join role r on r.ID = ur.RID
        left outer join account ac on ac.UID = u.id;
    </select>

    <insert id="saveUser" parameterType="user">
        insert into user(username,birthday,sex,address) values(#{username},#{birthday},#{sex},#{address})
    </insert>

    <update id="updateUser" parameterType="user">
        update user set username=#{username},birthday=#{birthday},sex=#{sex},address=#{address} where id=#{id};
    </update>

    <select id="findUserById" parameterType="Integer" resultMap="userMap" useCache="true">
        select * from user where id=#{id};
    </select>

    <select id="findTotal" resultType="Integer">
        select count(*) from user;
    </select>

    <select id="findUserByName" parameterType="String" resultMap="userMap">
        select * from user where username like #{username};
    </select>

    <select id="findUserByCondition" parameterType="user" resultMap="userMap">
        select * from user
        <where>
            <if test="username!=null">
                username=#{username}
            </if>
            <if test="sex!=null">
                and sex=#{sex};
            </if>
        </where>
    </select>

    <delete id="deleteUser" parameterType="Integer">
        delete from user where id=#{id};
    </delete>
</mapper>